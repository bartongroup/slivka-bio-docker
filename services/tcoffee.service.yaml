---
slivka-version: 0.8.3
name: TCoffee
description: T-Coffee (Tree-based Consistency Objective Function for 
  Alignment Evaluation) is a multiple sequence alignment software 
  using a progressive approach. It generates a library of pairwise 
  alignments to guide the multiple sequence alignment.
author: Cedric Notredame
version: '13.41.0.28bdc39'
license: GNU GPL

classifiers:
- 'Topic :: Computational biology :: Sequence analysis'
- 'Operation :: Analysis :: Sequence analysis :: Sequence alignment :: 
  Multiple sequence alignment'

parameters:
  sequence:
    name: input sequence file
    type: file
    required: true
    media-type: application/fasta

  check-pdb-status:
    name: Search sequences in PDB
    description: 'Forces t_coffee to run extract_from_pdb to check the
      pdb status of each sequence. This can considerably slow down the 
      program.'
    type: boolean
    default: false
    required: false

  mode:
    name: Preset Mode
    description: 'It indicates that t_coffee will use some hard coded
      parameters. These include: quickaln: Very fast, sequence type - all,
      accuracy - medium low'
    type: choice
    required: false
    choices:
      quickaln: quickaln
    default: quickaln

  distance-matrix-mode:
    name: Distance matrix computation method
    description: 'This flag indicates the method used for computing 
      the distance matrix (distance between every pair of sequences) 
      required for the computation of the dendrogram. Slow   The chosen 
      dp_mode using the extended library, fast:   The fasta dp_mode using 
      the extended library; very_fast: The fasta dp_mode using blosum62mt;
      ktup: Ktup matching (Muscle kind); aln: Read the distances on 
      a precomputed MSA'
    type: choice
    required: false
    choices:
      slow: slow
      fast: fast
      very fast: very_fast
      ktup: ktup
      aln: aln
    default: very fast

  dp-mode:
    name: Tree Computation method
    description: 'gotoh_pair_wise: implementation of the gotoh algorithm
      (quadratic in memory and time); myers_miller_pair_wise: implementation
      of the Myers and Miller dynamic programming algorithm ( quadratic
      in time and linear in space). This algorithm is recommended for very
      long sequences. It is about 2 times slower than gotoh and only accepts
      tg_mode=1or 2 (i.e. gaps penalized for opening); fasta_pair_wise:
      implementation of the fasta algorithm. The sequence is hashed, looking
      for ktuples words. Dynamic programming is only carried out on the
      ndiag best scoring diagonals. This is much faster but less accurate
      than the two previous. This mode is controlled by the parameters -ktuple,
      -diag_mode and -ndiag; cfasta_pair_wise: c stands for checked. It
      is the same algorithm. The dynamic programming is made on the ndiag
      best diagonals, and then on the 2*ndiags, and so on until the scores
      converge. Complexity will depend on the level of divergence of the
      sequences, but will usually be L*log(L), with an accuracy comparable
      to the two first mode ( this was checked on BaliBase). This mode is
      controlled by the parameters -ktuple, -diag_mode and -ndiag'
    type: choice
    required: false
    choices:
      gotoh pair-wise: gotoh_pair_wise
      myers-miller pair-wise: myers_miller_pair_wise
      fasta pair-wise: fasta_pair_wise
      cfasta pair-wise: cfasta_pair_wise
    default: cfasta pair-wise

  ndiag:
    name: Number of diagonals used by the fasta_pair_wise algorithm
    description: Indicates the number of diagonals used by the fasta_pair_wise
      algorithm (cf -dp_mode). When  -ndiag=0, n_diag=Log (length of the
      smallest sequence)+1.  When -ndiag and -diag_threshold are set, diagonals
      are selected if and only if they fulfill both conditions.
    type: int
    required: false
    min: 0
    max: 1000
    default: 0

  diag-mode:
    name: Number of diagonals used by the fasta pair-wise algorithm
    description: 'Indicates the manner in which diagonals are scored during
      the fasta hashing. 0: indicates that the score of a diagonal is equal
      to the sum of the scores of the exact matches it contains. 1: indicates
      that this score is set equal to the score of the best uninterrupted
      segment (useful when dealing with fragments of sequences).'
    type: choice
    required: false
    choices:
      '0': '0'
      '1': '1'
    default: '0'

  diag-threshold:
    name: Diagonal threshold
    description: 'Sets the value of the threshold when selecting diagonals.
      0: indicates that -ndiag should be used to select the diagonals (cf
      -ndiag section).'
    type: int
    required: false
    min: 0
    max: 1000
    default: 0

  sim-matrix:
    name: Alphabet degeneration method
    description: 'Indicates the manner in which the amino acid alphabet
      is degenerated when hashing in the fasta_pairwise dynamic programming.
      Standard ClustalW matrices are all valid.  They are used to define
      groups of amino acids having positive substitution values.  In T-Coffee,
      the default is a 13 letter grouping named Vasiliky, with residues
      grouped as follows: rk, de, qh, vilm, fy (other residues kept alone).  This
      alphabet is set with the flag -sim_matrix=vasiliky.  In order to keep
      the alphabet non degenerated, -sim_matrix=idmat can be used to retain
      the standard alphabet.'
    type: choice
    required: false
    choices:
      vasiliky: vasiliky
      idmat: idmat
    default: vasiliky

  matrix:
    name: Substitution Matrix
    description: This flag sets the matrix that will be used by alignment
      methods within t_coffee (slow_pair, lalign_id_pair). It does not affect
      external methods (like clustal_pair, clustal_aln). Users can also
      provide their own matrices, using the matrix format described in the
      appendix.
    type: choice
    required: false
    choices:
      blosum62mt: blosum62mt
    default: blosum62mt

  match-penalty:
    name: Match penalty
    description: Indicates the penalty to associate with a match. When using
      a library, all matches are positive or equal to 0. Matches equal to
      0 are unsupported by the library but non-penalized. Setting nomatch
      to a non-negative value makes it possible to penalize these null matches
      and prevent unrelated sequences from being aligned (this can be useful
      when the alignments are meant to be used for structural modeling)
    type: int
    required: false
    min: 0
    max: 1000
    default: 0

  gap-open:
    name: Gap opening penalty
    description: Indicates the penalty applied for opening a gap. The penalty
      must be negative.  If no value is provided when using a substitution
      matrix, a value will be automatically computed. Here are some guidelines
      regarding the tuning of gapopen and gapext. In T-Coffee matches get
      a score between 0 (match) and 1000 (match perfectly consistent with
      the library). The default cosmetic penalty is set to -50 (5% of a
      perfect match). If you want to tune -gapoen and see a strong effect,
      you should therefore consider values between 0 and -1000.
    type: int
    required: false
    min: -1000
    max: 0
    default: 0

  gap-ext:
    name: Gap extension penalty
    description: Indicates the penalty applied for extending a gap. The
      penalty must be negative.
    type: int
    required: false
    min: -1000
    max: 0
    default: 0

  cosmetic-penalty:
    name: Cosmetic penalty
    description: Indicates the penalty applied for opening a gap. The penalty
      must be negative and is set to a very low value by default. It will
      only have an influence on the portions of the alignment that are unalignable.  It
      will not make them more correct, but only more pleasing to the eye
      (i.e. Avoid stretches of lonely residues). The cosmetic penalty is
      automatically turned off if a substitution matrix is used rather than
      a library.
    type: int
    required: false
    min: -1000
    max: 0
    default: -50

  tg-mode:
    name: Terminal gaps penalty
    description: '0: terminal gaps penalized with -gapopen + -gapext*len;
      1: terminal gaps penalized with a -gapext*len; 2: terminal gaps unpenalized.'
    type: choice
    required: false
    choices:
      '0': '0'
      '1': '1'
      '2': '2'
    default: '1'

  iterate:
    name: Number of iterations
    description: Sequences are extracted in turn and realigned to the MSA.  If
      iterate is set to -1, each sequence is realigned, otherwise the number
      of iterations is set by -iterate.
    type: int
    required: false
    min: -1
    max: 100
    default: 0

  outorder:
    name: Output order
    description: 'Sets the order of the sequences in the output alignment:
      -outorder=input means the sequences are kept in the original order.
      -outorder=aligned means the sequences come in the order indicated
      by the tree. This order can be seen as a one-dimensional projection
      of the tree distances.'
    type: choice
    required: false
    choices:
      input: input
      aligned: aligned
    default: input

  inorder:
    name: Input order
    description: Multiple alignments based on dynamic programming depend
      slightly on the order in which the incoming sequences are provided.
      To prevent this effect sequences are arbitrarily sorted at the beginning
      of the program (-inorder=aligned). However, this affects the sequence
      order within the library. You can switch this off by setting -inorder=input
    type: choice
    required: false
    choices:
      input: input
      aligned: aligned
    default: input

command:
- t_coffee

args:
  _output:
    arg: -output=$(value)
    default: clustalw
  sequence:
    arg: -seq=$(value)
  check-pdb-status:
    arg: -check_pdb_status
  mode:
    arg: -mode=$(value)
  distance-matrix-mode:
    arg: -distance_matrix_mode=$(value)
  dp-mode:
    arg: -dp_mode=$(value)
  ndiag:
    arg: -ndiag=$(value)
  diag-mode:
    arg: -diag_mode=$(value)
  diag-threshold:
    arg: -diag_threshold=$(value)
  sim-matrix:
    arg: -sim_matrix=$(value)
  matrix:
    arg: -matrix=$(value)
  match-penalty:
    arg: -nomatch=$(value)
  gap-open:
    arg: -gapopen=$(value)
  gap-ext:
    arg: -gapext=$(value)
  cosmetic-penalty:
    arg: -cosmetic_penalty=$(value)
  tg-mode:
    arg: -tg_mode=$(value)
  iterate:
    arg: -iterate=$(value)
  outorder:
    arg: -outorder=$(value)
  inorder:
    arg: -inorder=$(value)

env:
  TEMP: /tmp/

outputs:
  alignment:
    path: '*.clustalw'
    media-type: application/clustal
  log:
    path: stdout
    media-type: text/plain
  error-log:
    path: stderr
    media-type: text/plain

execution:
  runners:
    default:
      type: SlivkaQueueRunner

tests:
- applicable-runners: ["default"]
  parameters:
    sequence: ${SLIVKA_HOME}/testdata/uniref50.fa
  timeout: 5
...
